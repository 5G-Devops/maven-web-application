@Library('shared-library') _

pipeline{
    agent any
    tools{
        maven'maven3.9.8'
    }
    parameters{
        choice(name: 'action', choices: 'create\ndelete', description: 'choose create/destory')
        string(name: 'repositoryname', description: 'Pass the repository details', defaultValue: 'radhagowthamhub')
        string(name: 'imagename', description: 'Pass the image name', defaultValue: 'maven-web-app')
        string(name: 'imagetag', description: 'pass the image tag', defaultValue: 'v1')
    }
    stages{
        stage('GitCheckOut'){
            when { expression { params.action == 'create' } }
            steps{
             git credentialsId: '264b3661-c46d-4418-916d-68769b652c6c', url: 'https://github.com/5G-Devops/maven-web-application.git'   
            }
        }
        stage('MavenUnitTest'){
            when { expression { params.action == 'create' } }
            steps{
                unittest()
                }
            }
        stage('mvnIntegrationTest'){
            when { expression { params.action == 'create' } }
            steps{
              mvnintegrationTest()
            }

        }
        // Here the jenkins sent src code to sonarqube server for code coverage
        stage('StaticCodeAnalysis'){
            when { expression { params.action == 'create' } }
            steps{
                script{
                def credentialsId = 'sonar-api'
                   staticCodeAnalysis(credentialsId)
             }
            }

        }
// Now the sonarqube server will send the qualitydate status to the jenkins, for this we have to configure the jenkins url in sonarqube 
// sonarqube>adminstration>configuration>webhook>jenkins url/sonarqube-webhook/>create
        stage('qualitygateStatus'){
            steps{
                script{
                    def credentialsId = 'sonar-api'
                       QualitygateStatus(credentialsId)
                }
            }
             
        }
        stage('MavenBuild'){
            steps{
                script{
                    MvenBuild()
                }
            }

        }
        stage('DockerBuild'){
            steps{
                script{
                    dockerBuild("${params.repositoryname}","${params.imagename}","${params.imagetag}")
                }
            }

        }
        
        }
    }
